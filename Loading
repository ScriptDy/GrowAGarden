-- LocalScript in StarterPlayerScripts
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LoadingScreen"
screenGui.IgnoreGuiInset = true -- Makes it cover the entire screen, including Roblox's top bar
screenGui.ResetOnSpawn = false -- Persists through player respawn
screenGui.Parent = PlayerGui

-- Create full-screen black Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(1, 0, 1, 0) -- Full screen
frame.Position = UDim2.new(0, 0, 0, 0)
frame.BackgroundColor3 = Color3.new(0, 0, 0) -- Black
frame.BackgroundTransparency = 0 -- Fully opaque
frame.Active = true -- Blocks interactions with other GUI elements
frame.Visible = false -- Hidden by default
frame.Parent = screenGui

-- Optional: Add a loading text
local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
textLabel.Position = UDim2.new(0.25, 0, 0.45, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "Loading..."
textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
textLabel.TextScaled = true
textLabel.Font = Enum.Font.SourceSansBold
textLabel.Parent = frame

-- Function to show loading screen
local function showLoadingScreen()
    frame.Visible = true
end

-- Function to hide loading screen
local function hideLoadingScreen()
    frame.Visible = false
end

-- Example: Trigger the loading screen (replace with your script execution logic)
local function executeScript()
    showLoadingScreen()
    -- Simulate some script execution (e.g., loading something)
    wait(5) -- Replace with your actual script logic
    hideLoadingScreen()
end

-- Example: Bind to some event to trigger the script (e.g., a RemoteEvent or a key press)
local UserInputService = game:GetService("UserInputService")
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.L then
        executeScript()
    end
end)
